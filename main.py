import telebot
import re

import psycopg2 # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º psycopg2 –¥–ª—è PostgreSQL
import psutil 


API_TOKEN = '7352442248:AAH9iCQ63EBR9fZ7n4Nm9wb2Jzu8eEPq9mg'

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
# DATABASE_URL = "postgres://postgres:123@localhost:5432/tele_bot"

# logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(API_TOKEN)

EMAIL_REGEX = r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'
PHONE_REGEX = r'(\+7\d{10}|8\d{10})'
PASSWORD_REGEX = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect(
  dbname="tele_bot",
  user="root",
  password="root",
  host="postgres",
  port="5432"
)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
cursor.execute("""
  CREATE TABLE IF NOT EXISTS emails (
    id SERIAL PRIMARY KEY,
    email TEXT UNIQUE
  );
""")

cursor.execute("""
  CREATE TABLE IF NOT EXISTS phones (
    id SERIAL PRIMARY KEY,
    phone TEXT UNIQUE
  );
""")
conn.commit()

def add_email(email):
  """
  –î–æ–±–∞–≤–ª—è–µ—Ç email –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç).
  """
  try:
    cursor.execute("INSERT INTO emails (email) VALUES (%s) ON CONFLICT (email) DO NOTHING", (email,))
    conn.commit()
    print(f"Added email: {email}")
  except Exception as e:
    print(f"Error adding email: {e}")

def get_emails():
  """
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö emails –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
  """
  cursor.execute("SELECT email FROM emails")
  return [row[0] for row in cursor.fetchall()]

def add_phone(phone):
  """
  –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç).
  """
  try:
    cursor.execute("INSERT INTO phones (phone) VALUES (%s) ON CONFLICT (phone) DO NOTHING", (phone,))
    conn.commit()
    print(f"Added phone number: {phone}")
  except Exception as e:
    print(f"Error adding phone number: {e}")

def get_phones():
  """
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
  """
  cursor.execute("SELECT phone FROM phones")
  return [row[0] for row in cursor.fetchall()]

@bot.message_handler(commands=['start'])
def send_welcome(message):
  bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ.\n"
             "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help.")

@bot.message_handler(commands=['help'])
def send_help(message):
  bot.reply_to(message, "–Ø —É–º–µ—é —Å–ª–µ–¥—É—é—â–µ–µ:\n""/find_email: –ù–∞–π–¥–∏ email-–∞–¥—Ä–µ—Å–∞ –≤ —Ç–µ–∫—Å—Ç–µ.\n"
             "/find_phone_number: –ù–∞–π–¥–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.\n"
             "/verify_password: –ü—Ä–æ–≤–µ—Ä—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å.\n"
             "/add_email: –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π email-–∞–¥—Ä–µ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
             "/add_phone: –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
             "/system_info: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ /find_email, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ email-–∞–¥—Ä–µ—Å–∞.")

@bot.message_handler(commands=['add_email'])
def handle_add_email(message):
  bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ email-–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
  bot.register_next_step_handler(message, add_email_to_db)

def add_email_to_db(message):
  email = message.text
  add_email(email)
  bot.send_message(message.chat.id, "Email-–∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω.")

@bot.message_handler(commands=['add_phone'])
def handle_add_phone(message):
  bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
  bot.register_next_step_handler(message, add_phone_to_db)

def add_phone_to_db(message):
  phone = message.text
  add_phone(phone)
  bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω.")

@bot.message_handler(commands=['find_email'])
def handle_find_email(message):
  bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ email-–∞–¥—Ä–µ—Å–æ–≤.")
  bot.register_next_step_handler(message, find_email)

def find_email(message):
  text = message.text
  emails = re.findall(EMAIL_REGEX, text)
  if emails:
    bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞:\n" + "\n".join(emails))
  else:
    bot.send_message(message.chat.id, "Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.message_handler(commands=['find_phone_number'])
def handle_find_phone(message):
  bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")
  bot.register_next_step_handler(message, find_phone)

def find_phone(message):
  text = message.text
  phones = re.findall(PHONE_REGEX, text)
  if phones:
    bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n" + "\n".join(phones))
  else:
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.message_handler(commands=['verify_password'])
def handle_verify_password(message):
  bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
  bot.register_next_step_handler(message, verify_password)

def verify_password(message):
  password = message.text
  if re.match(PASSWORD_REGEX, password):
    bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–π.")
  else:
    bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–π. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
                    " - –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    " - –°—Ç—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã\n"
                    " - –ß–∏—Å–ª–∞\n"
                    " - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")

@bot.message_handler(commands=['system_info'])
def handle_system_info(message):
  cpu_percent = psutil.cpu_percent()
  memory_percent = psutil.virtual_memory().percent
  disk_usage_percent = psutil.disk_usage('/').percent # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —Ä–∞–∑–¥–µ–ª–µ
  bot.send_message(message.chat.id, f"–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_percent}%\n"
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent}%\n"
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage_percent}%")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL
cursor.close()
conn.close()